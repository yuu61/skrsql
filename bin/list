#!/usr/bin/env bash
# -*- coding: utf-8 -*-

# 環境設定
export LANG=ja_JP.UTF-8
export LC_ALL=ja_JP.UTF-8

DATA_DIR="/usr/local/share/ssql"
DB_NAME="Can"

# ヘルプ表示
usage() {
  cat <<- EOM >&2
  使い方: $(basename "$0") <チャプター番号> <番号2> [番号3] [番号4]
  例: $(basename "$0") 1 1    # リスト1-1の場合
EOM
  exit 1
}

# エラー時にメッセージを表示して終了
error_exit() {
  echo "[ERROR] $1" >&2
  exit 1
}

# 引数チェック
if [ $# -lt 2 ]; then
  usage
fi

# パラメータ設定
chapter=$(printf "chap%02d" "$1")
shift 1

script_base=""
case $(basename "$0") in
  list)
    script_type="pre_list"
    fmt="%02d%02d"
    script_base=$(printf "$fmt" "$@")
    ;;
  can)
    script_type="pre_summary"
    fmt="%02d"
    script_base=$(printf "$fmt" "$1")
    ;;
  q)
    script_type="pre_quizans"
    fmt="%02d%02d"
    script_base=$(printf "$fmt" "$@")
    ;;
  drill)
    script_type="pre_quizapx"
    fmt="%d"
    script_base=$(printf "$fmt" "$1")
    chapter="chapac"
    ;;
  *)
    error_exit "未定義の形式: $(basename "$0")"
    ;;
esac

# 番号拡張 (3番目以降)
if [ -n "$2" ]; then
  script_base+="_$2"
fi
if [ -n "$3" ]; then
  script_base+="_$3"
fi

DDL_FILE="$DATA_DIR/setup/$chapter/${script_type}${script_base}.sql"

# ファイル存在チェック
if [ ! -f "$DDL_FILE" ]; then
  error_exit "問題データが見つかりません (ファイル: $(basename "$DDL_FILE"))"
fi

# 処理開始メッセージ
echo "問題ファイル: $(basename "$DDL_FILE")"

# DB再作成
dropdb --if-exists "$DB_NAME" >/dev/null 2>&1
createdb "$DB_NAME" || error_exit "データベースの作成に失敗しました"

# SQL実行
psql "$DB_NAME" < "$DDL_FILE" >/dev/null 2>&1 || error_exit "SQL 実行に失敗しました"

# 終了時にDBを削除
trap 'echo "後処理: データベース "$DB_NAME" を削除中..."; dropdb "$DB_NAME"' EXIT

echo "--- psql を起動します: 終了するには \q を入力 ---"
echo "カーソルキーは利用できません。テキストエディタ等からコマンドを流し込むことを推奨します。"
psql -n "$DB_NAME"
